// Code generated by vfsgen; DO NOT EDIT.

package certmanagercainjector

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Chart statically implements the virtual filesystem provided to vfsgen.
var Chart = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 1, 1, 0, 1, 0, 0, time.UTC),
		},
		"/.helmignore": &vfsgen۰CompressedFileInfo{
			name:             ".helmignore",
			modTime:          time.Date(2019, 1, 1, 0, 1, 0, 0, time.UTC),
			uncompressedSize: 333,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\xc1\x6a\x23\x31\x0c\x86\xef\x7a\x8a\x7f\x99\xcb\xee\xb0\x78\x1e\x22\xd9\xc3\x9e\x5a\x48\xc9\xb5\x78\x66\x14\x5b\x89\x47\x36\xb6\x26\x69\x7b\xe8\xb3\x97\x24\x84\xf6\xf2\x81\x3e\x24\xf1\x75\x78\xf6\x66\x5c\xb5\xc1\x32\x24\x68\xae\x8c\x4b\x64\xc5\xb8\x4a\x9a\x45\x03\x8a\x9f\x4e\x3e\x70\x73\xd4\xe1\x25\x4a\x43\x5b\x4b\xc9\xd5\x1a\x5a\xe4\x94\x10\x52\x1e\xb1\x78\x9b\xa2\x68\xf8\x8b\xca\xc9\x9b\x9c\x19\xc5\x5b\xfc\xe1\xbd\xce\xd4\x41\x39\x78\x93\xac\xf8\x5d\x2a\x1f\xe4\x8d\x67\x5c\xc4\x22\x7e\xfd\x71\x78\xd2\xf4\x8e\xac\xb7\xcb\x6b\x12\x0a\x57\x24\x51\x76\xe4\xb6\xbb\xd7\x9d\xe5\xca\xd4\x61\x93\x97\x25\x2b\xf6\x9b\x1d\x66\xa9\x8d\x5c\x10\x1b\x6e\xbc\xe7\x93\x1b\x3f\xea\x70\xe3\x43\xc4\x30\x5c\xf1\x18\xdb\x59\x87\xef\x47\xa3\x9f\x4e\x6b\xc1\x41\x12\x37\xea\x5d\xbb\x14\xea\xdd\xe8\x4f\xd4\x3b\x5b\x0a\xf5\x9f\xd4\x61\xef\xab\xe4\xb5\xe1\xff\xf6\x5f\x23\x57\x6a\x3e\xf2\x64\xe4\x64\x66\x3f\xdc\xf7\x6a\x3e\xd2\x57\x00\x00\x00\xff\xff\xbc\x5b\x94\x77\x4d\x01\x00\x00"),
		},
		"/Chart.yaml": &vfsgen۰CompressedFileInfo{
			name:             "Chart.yaml",
			modTime:          time.Date(2019, 1, 1, 0, 1, 0, 0, time.UTC),
			uncompressedSize: 359,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xb1\x4e\xc4\x30\x0c\x40\x77\x7f\x85\x7f\x20\x6d\x6f\xed\x04\x1b\x5f\xc0\xee\x4b\x4d\x9b\x36\xb1\x23\xc7\x3d\x54\xbe\x1e\x51\x84\x0e\x98\x6e\x7c\x96\xfc\xfc\x64\xaa\xe9\x95\xad\x25\x95\x11\x6f\x17\xa0\x5a\xef\x38\x74\x97\xa1\x1b\x60\xe2\x16\x2d\x55\x3f\x87\xcf\xf8\xc2\xb9\x60\x5c\xc8\x1c\xdf\xd4\x70\xe2\x9a\xf5\x48\x32\xa3\x2f\x8c\x91\xcd\x43\x21\xa1\x99\x0d\x23\x25\x59\x39\xba\x1a\x46\x2d\x55\x85\xc5\x61\xd1\xc2\x23\x2e\xee\xb5\x8d\x7d\x3f\x27\x5f\xf6\x6b\x17\xb5\xf4\x2b\x7b\x73\x8a\x5b\xff\xdb\x01\x1b\x1f\xef\x6a\x53\x1b\x21\xfc\x91\x43\xc0\x6d\xbf\x72\xc8\x3c\x2b\x04\xcc\xec\x8d\x25\xda\x51\x1d\x02\x7a\x6e\x50\x28\x89\x53\x12\xb6\x73\x97\x0b\xa5\x3c\xe2\x4a\x85\xdb\xd3\xcf\xa9\x2e\x29\x20\x0a\x7d\x15\x95\x5d\x84\xed\x03\xbe\xe9\x9e\x0e\x4d\x77\x8b\x7c\x4a\x1e\xae\xbe\xfd\xff\xe1\x67\x00\x00\x00\xff\xff\x29\x2b\x03\x5f\x67\x01\x00\x00"),
		},
		"/templates": &vfsgen۰DirInfo{
			name:    "templates",
			modTime: time.Date(2019, 1, 1, 0, 1, 0, 0, time.UTC),
		},
		"/templates/NOTES.txt": &vfsgen۰FileInfo{
			name:    "NOTES.txt",
			modTime: time.Date(2019, 1, 1, 0, 1, 0, 0, time.UTC),
			content: []byte(""),
		},
		"/templates/_helpers.tpl": &vfsgen۰CompressedFileInfo{
			name:             "_helpers.tpl",
			modTime:          time.Date(2019, 1, 1, 0, 1, 0, 0, time.UTC),
			uncompressedSize: 1054,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\x41\x6b\xdc\x30\x10\x85\xef\xfe\x15\x0f\xd1\x40\x9b\xb2\xce\xa1\xd0\x43\x20\xa7\xb4\x87\x52\x48\xa1\x81\xf4\x58\x64\x79\xd4\x9d\x22\xcb\xae\x46\xda\x66\x49\xf2\xdf\x8b\x24\xc7\xbb\x5b\xd8\x90\xbd\x0d\xf2\xa7\x37\x6f\xde\xc8\x0f\x0f\x17\xe7\xd8\xf0\x70\x09\xa1\x08\xcb\x8e\xe2\x76\xa2\xab\x21\x49\xd4\x66\x4d\x97\x38\xbf\x78\x7a\x6a\x32\xd5\x7c\xbe\x9f\xb4\xef\x11\xd7\x04\xaf\x07\xc2\x68\x4b\x6d\xd6\x3a\xc4\xb6\x99\xb9\x15\x7a\xb2\xec\x09\xca\x68\xf6\xbf\xc9\xc4\x31\xb4\x19\x57\x58\xed\x00\x9d\x5c\x44\x7b\x5d\x6e\xde\x64\xad\xf6\x4e\xbb\x44\x52\xc8\x6f\x1b\x0a\x81\x7b\xc2\x23\x62\x48\xde\xe0\xe3\x87\x52\xf2\x70\x9b\xac\xe5\x7b\xa8\xd5\x4e\x8c\x7c\x5f\xea\x6a\xf1\x3a\x90\x8e\x04\xbd\xf4\xb0\xc9\xb9\x2d\xfe\x24\xed\xd8\x32\xf5\xd0\xd3\x54\xcc\xb7\xcd\x0f\xaa\xea\x85\x8f\xb9\x47\x1e\x44\xd0\x91\xd1\x49\x08\x32\x0e\x84\xaf\xa9\xa3\xe0\x29\x92\xd4\x91\x2d\x93\xeb\x05\x3a\x10\x1c\x0f\x1c\xa9\x47\x1c\x11\xd7\x2c\x78\xdb\x6d\x4b\x1c\x9f\x6e\x6e\x33\xcb\xfe\x17\x64\x22\xf3\xae\x6d\xbe\x58\x04\x72\xa4\x65\xce\xcd\x8c\x3e\x6a\xf6\x52\x93\xab\x67\x1c\xf1\x97\x9d\x43\x47\x48\x92\x7d\x0a\x74\x31\x3f\xbb\x7d\x29\xdd\x8c\x1d\x26\xcc\x76\x09\xf4\xf9\xe3\x12\xea\x33\x73\x14\x78\x55\xea\x4e\x76\x4a\x6f\xca\x04\x97\x57\xaf\x5f\xec\x9e\xcf\x25\x8c\xaa\xd2\x7e\xaf\x49\xd5\xcb\x8b\xd7\x83\xd3\x93\x0d\x4e\x81\x7d\xb4\x50\x67\xb2\x3a\x13\xf5\x9f\x5a\xed\x7b\xca\x53\x3b\x56\x1f\x3c\xc1\xbd\xdd\xe6\x9f\x66\x43\x41\x78\xf4\x79\xaf\x65\xbf\xf3\x63\xa9\x94\xd3\x1d\xb9\x97\x77\x5c\x40\x75\x74\xa2\xfd\xc0\x6b\x7d\x37\x37\x7c\x44\xa0\xc9\x69\x43\x50\xef\x15\xd4\x4f\x75\xd2\xa8\xff\x02\x00\x00\xff\xff\x3e\x33\x22\xe1\x1e\x04\x00\x00"),
		},
		"/templates/deployment.yaml": &vfsgen۰CompressedFileInfo{
			name:             "deployment.yaml",
			modTime:          time.Date(2019, 1, 1, 0, 1, 0, 0, time.UTC),
			uncompressedSize: 2641,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x95\x3d\x6f\xdb\x3c\x10\x80\xf7\xfc\x8a\x83\xf1\x0e\x6f\x07\x29\x4d\xd1\xa1\x10\xd0\xc1\x70\xd2\x29\x4d\x8d\x04\x08\xd0\xa9\x38\x53\x67\x99\x0d\x45\xaa\xe4\xc9\xad\x21\xfb\xbf\x17\xb4\x64\x49\xb4\xec\x34\xfe\x98\xac\xfb\xbe\x87\xbc\x23\x16\xf2\x99\xac\x93\x46\x27\x80\x45\xe1\xae\x97\x37\x57\x2f\x52\xa7\x09\xdc\x52\xa1\xcc\x2a\x27\xcd\x57\x39\x31\xa6\xc8\x98\x5c\x01\x68\xcc\x29\x81\xaa\x02\xa9\x85\x2a\x53\x82\x91\x40\xa9\x7f\x92\x60\x63\xe3\x79\xa9\x94\x37\x18\x41\x0c\x9b\x4d\x63\xed\x0a\x14\xb5\x4b\xfc\x48\x8a\xd0\x51\xfc\xb0\x13\xc3\x1a\x7e\x95\x86\xa9\xb6\x56\x38\x23\xe5\x7c\x16\xf0\xc5\x1c\x4d\x13\xa4\xd8\x9a\xc6\x2f\xe5\x8c\xac\x26\x26\x17\x4b\x73\xfd\x6a\x91\xff\xf4\x96\xda\x31\x6a\x5f\xf3\xa0\xe8\xe3\x4e\x39\x6a\xcc\x28\x8d\x66\xab\xb0\xd5\x27\xb2\x4b\x29\x5a\xc7\x05\xa9\x3c\x76\x8b\x6b\xb1\x40\xcb\x47\x4b\xdc\x6a\x9b\x1a\x5d\x41\xc2\x23\xb1\x54\x28\x29\xd0\xd5\xe1\x9f\x51\x95\xe4\xe2\x46\x38\x31\xa5\xe6\x3a\x85\x23\xb5\x8d\x51\x53\xcc\x91\xc5\xe2\xbe\x87\xf5\x24\xb0\x97\xa2\x3d\x13\xee\xd9\x78\xab\x2a\x82\xdf\x92\x17\x2d\x1e\xc7\x16\x99\xb2\x55\x83\xa6\xf9\xaa\x49\x78\xe3\x18\xd6\xc0\xe6\x3b\xe6\x0a\xd6\xa0\xa5\x4e\x49\x33\x7c\xec\x82\x91\x4e\xeb\x0f\xa6\xbc\x50\xc8\xd4\x50\xed\xcd\x83\xff\xa9\x00\xf0\x89\x88\x2f\x87\x7c\x36\xe6\x0b\xee\xf1\x79\x77\xb9\x49\xaa\xb5\x61\x64\x69\x74\xcb\xcc\xc3\x96\xf3\xf6\xdc\x0a\x93\x8e\x3b\x23\xef\x59\x55\xbb\x83\x3a\x62\xb3\x86\xe6\xf8\x3e\x75\x89\x82\x23\x04\xd8\x4d\xd2\xf6\x7f\xdd\xce\x58\x08\x3f\x3a\x0f\x27\x2d\xb5\x03\x05\x67\xca\xcc\x50\xc5\x85\x95\xc6\x4a\x5e\x4d\x14\x3a\x17\xb2\x1e\xa8\x82\x39\x3e\xea\x1f\xec\xc7\x03\x3d\x01\x08\xa3\x19\xa5\x26\xdb\xbb\x80\x51\xb7\xa6\xe3\x89\xe7\x3f\x38\x78\x00\x99\x63\x46\x09\x8c\x7a\x55\x6c\x45\x7e\xa7\x18\x27\xd9\x58\x3f\x36\x49\x55\x41\x4a\x73\x2c\x15\xef\x42\x8d\x8b\xa2\x79\x32\xf6\x1c\x19\x33\xd8\x6c\x46\xfb\x39\xa6\xa5\x52\x53\xa3\xa4\x58\x05\x2d\xd7\x3e\x45\xab\x0c\xab\x43\x9b\xf5\xfa\x39\xc6\x5b\x99\xec\x9e\x96\xa4\x42\xdf\x08\xa2\x68\xf9\x79\x48\xf7\xb0\xf5\x00\xe8\x2b\xe9\x08\x53\xb2\x77\x7e\xc1\x4a\xa3\xe3\xf6\x71\x1b\xa6\xaf\x2d\x23\x6a\x4c\xa3\xd6\xf4\x50\x59\x6f\x8a\xba\x2d\x53\xb9\x93\x72\xfd\xf7\xff\xf4\xdb\xed\x8f\x87\xf1\xd7\xbb\xa7\xe9\x78\x72\xf7\xee\xc4\xae\xe9\x0f\x5b\x1c\xdb\xec\xc8\x00\x76\xea\x76\xf6\x6e\xde\xbf\x81\x2d\xe9\x65\x12\xb4\x50\xdf\xd5\xa0\xd4\x9e\x1e\x60\xe9\xf3\x7d\xb1\x26\x4f\x02\x31\xc0\x5c\x92\x4a\x1f\x69\xbe\x2f\x6f\x34\x53\xe4\x45\xd2\x2e\xeb\x0e\x6c\xcf\xda\x92\x33\xa5\x15\xe4\x92\x03\x0d\xb6\xca\x5e\x83\x1f\x76\xbd\x0c\xde\x1a\x6d\x52\x7a\x6a\x1e\xdf\xae\xe1\xbe\x34\xc8\x71\x60\x61\xed\xd1\x1a\x64\xc0\xf9\x5c\x6a\xc9\xbd\x49\xd9\x49\x2e\x8d\xcc\x46\x91\xed\x96\x6d\x1d\xbc\x27\x3c\x21\xfe\xdf\x00\x00\x00\xff\xff\xb4\x9d\x0f\x3c\x51\x0a\x00\x00"),
		},
		"/templates/rbac.yaml": &vfsgen۰CompressedFileInfo{
			name:             "rbac.yaml",
			modTime:          time.Date(2019, 1, 1, 0, 1, 0, 0, time.UTC),
			uncompressedSize: 1840,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x55\x3f\x93\xd4\x3e\x0c\xed\xf3\x29\x34\xa9\x7f\xf1\xcd\x75\xbf\x49\x07\x14\x74\x14\xc7\xcc\x35\x0c\x85\xe2\x28\x89\x58\xc7\x36\xb6\xbc\x07\x2c\xfb\xdd\x19\x3b\xb9\x85\x63\xff\xcc\x1d\x6c\x49\x15\x8f\xa5\xa7\xf7\xf2\xa4\x91\x77\xbb\x06\x78\x00\x75\x8f\x26\x51\x54\xa3\x71\x1d\x1a\x15\x3a\xd4\x4a\x07\x42\x21\x68\xf6\xfb\x0a\x3d\xdf\x53\x88\xec\x6c\x0b\x25\x86\x49\x26\x17\xf8\x1b\x0a\x3b\xab\x36\xff\x47\xc5\xee\x66\x7b\xdb\x91\xe0\x6d\xb5\x61\xdb\xb7\xf0\xc6\xa4\x28\x14\xee\x9c\xa1\x6a\x26\xc1\x1e\x05\xdb\x0a\xc0\xe2\x4c\x2d\xec\x76\x20\x34\x7b\x93\x19\x6a\x8d\x6c\x3f\x91\x16\x17\xd4\x90\x8c\xc9\x19\x35\x28\xd8\xef\x2b\x00\x83\x1d\x99\x98\x81\x00\xe8\xfd\x79\xe4\x13\x54\xc9\x55\x9b\xd4\x51\xb0\x24\x54\xe4\x1d\x88\xd9\x6a\x93\xfa\x17\xa2\xd9\x46\x41\xab\xa9\x85\x5c\x42\xdd\x91\x21\x8c\xa4\xde\xe1\x4c\xe7\x41\x33\x5a\x1c\xa9\x6f\xba\xaf\xed\x13\xd4\x7b\x0a\x5b\xd6\x07\xe0\x44\x66\x56\x71\xba\xd1\x13\x06\x39\x2b\xb1\x44\x57\x8d\x21\x19\x2a\xa6\x34\x80\x9e\xdf\x06\x97\x7c\x6c\xe1\x43\xad\x29\xc8\x42\x1a\xd6\xae\xd4\x1f\x0b\x45\xa0\xe8\x52\xd0\x74\xc8\xe2\x81\x35\x0a\xc5\x35\xbe\xa5\xd0\x95\xd8\x48\x52\xff\x07\xb5\xe1\x58\xbe\x0f\x28\x7a\x2a\x39\xbf\x31\x9d\xaa\x1b\x49\x07\x92\xab\x96\xd4\xce\x0e\x3c\xce\xe8\x63\x86\xd2\x96\xec\xd9\xfa\xcb\xbc\xe6\x53\xf2\xfd\x7a\xf2\xe7\xb8\xb0\x9f\x39\xe6\x81\x0e\x34\x72\x94\xf0\xeb\x20\x9f\xd2\xb1\x45\xc3\x3d\x0a\xdb\xf1\x81\xba\xc9\xb9\xcd\x22\x2c\x2d\xc0\x22\x6e\x4e\x72\x21\xe1\x39\x9e\xfc\x94\x7e\x4a\xb1\xe7\x67\x6a\x45\xcf\x71\x19\xb0\xeb\xd0\xd2\x17\x21\x9b\xbd\x8a\x97\x66\x2a\x45\x71\xf3\xe3\x55\x4f\x03\x5b\xfe\xb3\x3f\x6f\x9a\xe6\x6f\x17\xce\x6b\xb6\x3d\xdb\xf1\xdf\xde\xb9\xfa\xde\x71\x86\xee\x68\xc8\xb6\x3c\x4e\xc9\x85\x06\x55\x00\xc7\x6f\xc1\x0b\x3b\x11\x53\x97\x03\xeb\xb2\xbb\xe8\xe5\x51\x0f\x17\xaa\xe8\x51\x53\x7b\xe4\x5e\xb9\x86\xef\xf0\x39\x39\x39\x38\xb2\xc8\x5d\x6d\x7a\xa5\xb5\x4b\x56\xaa\xfc\x46\x92\xed\xcb\x4b\xf8\x23\x00\x00\xff\xff\xb0\x74\xb6\xd7\x30\x07\x00\x00"),
		},
		"/templates/serviceaccount.yaml": &vfsgen۰CompressedFileInfo{
			name:             "serviceaccount.yaml",
			modTime:          time.Date(2019, 1, 1, 0, 1, 0, 0, time.UTC),
			uncompressedSize: 545,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\x4d\x6e\xc2\x30\x10\x85\xf7\x9c\x62\xc4\x1e\xa3\x76\x99\x5d\x2f\x50\x55\x45\x42\xea\x72\x62\x3f\xc0\x65\x3c\x4e\xfd\x83\x54\x05\xee\x5e\x05\x92\x05\xad\x52\x76\xd6\xf8\x7d\x7e\x9f\x87\x3b\xbf\x45\xca\x3e\x6a\x43\xa7\xa7\xc5\xd1\xab\x6b\x68\x83\x74\xf2\x16\x2f\xd6\xc6\xaa\x65\x11\x50\xd8\x71\xe1\x66\x41\xa4\x1c\xd0\x50\xdf\x93\x57\x2b\xd5\x81\x96\x96\xbd\x7e\xc2\x96\x98\xcc\xae\x8a\x0c\x81\x25\x19\xba\x5c\xc6\x74\xee\xd8\xde\x10\xf3\x0e\x01\x67\x98\xd7\x69\x4c\x67\xfa\xaa\xb1\xe0\x96\x16\x6e\x21\x79\x68\x21\xe2\xae\x9b\xad\xb9\xab\xb8\x46\xcd\xb1\xb6\x48\x8a\x82\x6c\x7c\x5c\xff\x2b\xf9\x90\xf6\x9a\x0b\xeb\xe0\xfc\x47\x7a\x1e\x0a\xac\xbc\x87\x5b\xb5\xdf\xf7\x5f\x1d\x57\x39\x81\x07\x48\x30\xf9\xb0\xb6\x07\x4e\x65\x56\xf1\x7a\x3b\x3a\xf6\xfd\x8a\xfc\x8e\xcc\x96\xa5\x22\x9b\xbd\xc4\x96\xc5\xf8\xc0\x7b\xbc\x55\x91\x0d\x6c\x42\xc9\x43\xf2\xf7\xec\xfa\x7c\x89\x1f\x1c\xe4\x21\x7e\x26\xf5\xea\xa0\x85\x9e\xa7\x52\xa8\x1b\x8e\x3f\x01\x00\x00\xff\xff\x27\xea\x26\xb8\x21\x02\x00\x00"),
		},
		"/values.yaml": &vfsgen۰CompressedFileInfo{
			name:             "values.yaml",
			modTime:          time.Date(2019, 1, 1, 0, 1, 0, 0, time.UTC),
			uncompressedSize: 971,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x53\x3d\x6f\xdc\x4a\x0c\xec\xf5\x2b\x08\xbb\x78\xcd\x93\x65\xbf\xd7\x6d\x67\x18\x29\x5c\xf8\x03\x36\x9c\x26\x48\xc1\x5b\xf1\x74\x6b\xaf\x96\x6b\x92\x7b\xb6\x10\xe4\xbf\x07\xbb\xf2\x39\x17\xa4\x13\xb8\xe4\xcc\x70\x38\x9a\x22\x6f\x30\xba\x0e\xe0\xf4\x14\x1e\x68\x4b\x42\xc9\x13\x18\x03\x27\x02\x16\x98\x59\x08\x94\xbc\x90\x69\x2d\x6f\x08\x8a\xd2\x08\x6f\x3b\x4a\x90\x4b\x8c\x21\x4d\x10\x66\x9c\x48\x57\x10\xa1\xad\x83\x9d\x59\x56\x37\x0c\x2f\x65\x43\x92\xc8\x48\xcf\x02\x0f\x23\x7b\x1d\x0c\xf5\x45\x07\xcf\x69\x1b\xa6\x22\xd4\x67\x1e\x7b\xcf\xc9\x30\x24\x92\xa1\x22\xf6\x0d\xae\xcf\x12\xf6\x68\xd4\x0b\x4d\x41\x4d\x96\xa1\xe1\x77\xb0\xb2\xdd\x97\x18\x1f\x57\x59\x0e\xbe\x7d\xaf\x6f\xd0\x43\xc2\x99\x1c\x9c\x7c\x00\x54\xac\x55\xfa\x49\xd7\x1a\xee\xb2\x05\x4e\x18\x21\x4b\x60\x09\xb6\x80\x8f\xa8\x7f\xec\xb5\x65\x01\xdb\x11\x78\x12\xeb\x67\x4c\x38\x91\x40\xe6\xb1\x6e\x77\x98\xba\xaa\x43\xb7\x2b\xd5\x49\x07\x20\x1b\xf4\xd5\x42\x00\x2f\x84\x46\x0e\x4c\x0a\x55\xca\x48\x38\x92\x7c\x89\xe4\x2b\xf1\xda\x73\x0a\x77\x7b\x12\x09\x23\x35\xa2\x2a\x59\x33\xfa\x0f\x7e\x63\x50\xab\x9e\xd7\xb7\xab\xe6\xd2\x0d\xe6\x26\x6b\x05\x03\xfa\x40\x6b\x60\x9f\xd3\x4d\x4a\x27\x94\x63\xf0\x78\xc5\x25\x99\x83\x8b\xae\x53\x13\x34\x9a\x16\x07\x3f\x7e\x36\x0b\x6c\xc9\xe4\xe0\x81\xdb\xe1\x9e\xf2\x88\x46\xad\x2e\xc7\x95\x96\x07\x00\x98\xf1\xfd\xb1\xc8\x44\x0e\xce\x7f\x57\x9e\x12\xee\x31\x44\xdc\x44\x6a\x14\x99\xc7\xcb\x94\xd8\xb0\x8a\xd2\x46\xd4\x1d\x59\x8d\xe3\x18\x0e\x9f\x32\x95\x99\x92\x69\x5b\xc7\x63\x48\xcf\xe4\x8d\xa5\xa3\x77\x13\xbc\x94\x69\x3d\x65\x27\xa4\x5c\xc4\x93\x7e\xaa\x16\x7a\x2d\xa4\xa6\x07\x61\x3e\x17\x07\x17\xe7\xf3\x41\x15\xcd\x2c\x8b\x83\xff\xff\xbb\x09\x5d\x97\x78\xa4\xc7\xe6\x12\xcb\x2a\xa7\xe5\xa1\xce\x0a\x65\xd6\x60\xad\xf9\xb5\xe0\x52\x53\xf9\x4c\xa6\x86\xfe\x65\x38\x3e\x79\x7f\xa4\xee\xaf\x93\x35\x38\x30\x9c\xea\xb5\x46\xca\x91\x17\xd8\x2c\xa0\x64\x56\xff\x06\xdb\x05\x85\x3d\x4a\xa8\x16\x9d\xb5\xf1\xeb\x2d\x24\x86\x3d\xc6\x42\x10\xb4\x76\xfe\xbb\xa6\x6c\x87\x62\xff\x28\x60\xce\x5f\x49\x34\x70\x82\xb7\x10\xe3\x21\x8d\xeb\xb0\xe1\xe4\xc0\x63\x42\x59\x6a\x08\x4b\x8c\xf7\x1c\x83\x5f\x1c\x5c\x6f\x6f\xd9\xee\x85\x94\x92\x75\xbf\x02\x00\x00\xff\xff\x18\xe6\xc6\x89\xcb\x03\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/.helmignore"].(os.FileInfo),
		fs["/Chart.yaml"].(os.FileInfo),
		fs["/templates"].(os.FileInfo),
		fs["/values.yaml"].(os.FileInfo),
	}
	fs["/templates"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/templates/NOTES.txt"].(os.FileInfo),
		fs["/templates/_helpers.tpl"].(os.FileInfo),
		fs["/templates/deployment.yaml"].(os.FileInfo),
		fs["/templates/rbac.yaml"].(os.FileInfo),
		fs["/templates/serviceaccount.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰FileInfo:
		return &vfsgen۰File{
			vfsgen۰FileInfo: f,
			Reader:          bytes.NewReader(f.content),
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰FileInfo is a static definition of an uncompressed file (because it's not worth gzip compressing).
type vfsgen۰FileInfo struct {
	name    string
	modTime time.Time
	content []byte
}

func (f *vfsgen۰FileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰FileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰FileInfo) NotWorthGzipCompressing() {}

func (f *vfsgen۰FileInfo) Name() string       { return f.name }
func (f *vfsgen۰FileInfo) Size() int64        { return int64(len(f.content)) }
func (f *vfsgen۰FileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰FileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰FileInfo) IsDir() bool        { return false }
func (f *vfsgen۰FileInfo) Sys() interface{}   { return nil }

// vfsgen۰File is an opened file instance.
type vfsgen۰File struct {
	*vfsgen۰FileInfo
	*bytes.Reader
}

func (f *vfsgen۰File) Close() error {
	return nil
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
