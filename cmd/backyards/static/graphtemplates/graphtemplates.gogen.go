// Code generated by vfsgen; DO NOT EDIT.

package graphtemplates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// GraphTemplates statically implements the virtual filesystem provided to vfsgen.
var GraphTemplates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 9, 15, 9, 52, 48, 196396243, time.UTC),
		},
		"/base.json": &vfsgen۰CompressedFileInfo{
			name:             "base.json",
			modTime:          time.Date(2019, 9, 15, 8, 8, 52, 151211852, time.UTC),
			uncompressedSize: 4139,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x96\x51\x6f\xe2\x46\x10\xc7\xdf\xf9\x14\xab\x6d\x1f\x48\x85\x1c\x03\x76\x82\x11\x41\x4a\xef\x12\xa9\x52\xa5\x3b\x25\x55\x5f\xc2\x15\x2d\xf6\x00\xab\x33\xbb\xce\xec\x9a\x42\x23\xf7\xb3\x57\x6b\x4c\xf0\xda\x1c\x24\x97\x34\xb9\x97\x28\x8c\xf7\x3f\xb3\x33\xf3\x9b\xb1\x1f\x1a\x84\xd0\x25\xa0\xe2\x52\xd0\x3e\xa1\xcb\x36\x6d\x19\x53\xc4\x34\x53\x32\xc5\x10\x14\xed\x13\x73\xca\x18\x77\xff\x13\x42\x13\x94\x0b\xd0\x73\x48\xcb\x56\x42\x28\x8b\x22\x04\x65\x8c\x74\xae\x75\xd2\x3f\x3d\x6d\x77\xce\x1d\xd7\x71\x9d\x76\x3f\x70\x03\xf7\xb4\x24\x2c\x54\x59\x63\xfb\x37\x2b\xa2\xab\xf9\x44\x32\x8c\x76\xb1\x97\x0c\x39\x9b\xc4\x60\x5d\x41\x73\x1d\xc3\x6d\x3a\x9d\xf2\x95\x7d\x87\x50\x0a\xa5\x99\xd0\xc6\x6a\xb4\x71\x0a\xe6\x3e\x84\x16\xa1\x8a\x40\xf9\xd9\x29\x8f\x35\xe0\x93\xf4\x08\x89\x44\x0d\x78\x31\xa2\x9b\xe2\x8c\x68\x2b\x02\xa5\xb9\x60\x9a\x4b\x31\x56\x80\x4b\x1e\xc2\x58\xb0\x05\x5c\x8c\xe8\x14\xa5\xd0\x09\x9b\xc1\x88\xee\x0b\xcc\x85\x06\x5c\xb2\xd8\x0e\x5d\xb6\x12\xaa\x34\x24\x26\x65\xdf\xdd\x39\x68\x94\xdc\xd0\xbf\x79\x34\x03\x6d\x8e\xdc\x15\xcf\x4b\xbe\xf2\xfa\x98\x8b\xdf\x7c\xbe\x1d\x0c\x9c\x52\xb9\x86\x43\xda\xda\x9d\x9b\x21\x8f\x12\x69\xf7\xd1\xf8\xa6\x7d\xd2\xed\x3e\x5a\xb2\x92\x42\x71\x31\x8b\x41\x69\xa6\xab\xa2\xfb\x14\x70\x5d\x31\x12\x42\x61\x95\x98\x1a\x53\x95\x2e\x9a\xc8\x34\x34\xb9\xd2\x5c\x8e\x11\xee\x53\x50\x5a\x8d\xb5\xd4\x2c\x7e\x18\x0c\x9c\x4d\x3b\x86\xc3\xec\x6e\x30\x70\xb6\xc5\x18\x0e\xbf\x9c\x9c\x94\x6e\xbc\xc1\xf1\x91\xd1\xdf\x3e\x1a\xd7\xd1\x23\x4f\x95\xdb\x12\x42\x53\xc1\xcd\x4d\xa9\x90\x02\x2c\x3f\x9b\xe6\xfe\x01\xab\xfc\xf1\x60\xe0\xe4\xbf\xad\xf2\x98\x50\x10\xf2\x05\x8b\x4d\x85\x3a\xd6\x03\x3d\x47\x50\x73\x19\xe7\xa3\x71\xf7\x60\xc8\x89\x65\x9e\xe8\x4f\xe7\x67\xac\x1d\x9d\x51\x92\x7d\xd9\x55\xb0\xca\xc0\xbe\x5e\x5d\x21\x4a\x54\xa4\xe9\xaf\x56\x27\xef\xd4\xa4\xe6\x93\xbb\xd4\x42\x50\x89\x14\x0a\xc6\xa1\x8c\xe0\xe2\xdf\x11\xf5\x1d\x67\x44\xeb\xcd\x23\xa7\xe4\x05\xad\x27\x27\xe4\x17\xd2\x76\x5d\xf2\xe9\x86\x2c\x21\xd4\x12\x9b\xee\xab\xf0\x90\x00\x86\x20\xf4\xcb\x90\x68\x1f\x40\xc2\xba\xa2\x5d\x6e\x52\xa6\xa5\xd7\xf9\x70\x75\xdd\xa1\xd6\x81\xac\xf5\x54\xf5\xf5\xf5\x79\xcf\xbd\xac\x14\xc4\x10\xa0\x19\xea\x3f\x8b\xf5\xe5\x3a\x6e\xfb\x3b\xfd\x47\x9e\xc7\xba\xec\x88\xff\x8e\xed\xbc\xf4\xeb\x99\x13\xf0\x3b\xd3\x20\xc2\xf5\x37\xe0\x2f\x90\xf7\x5e\x07\xf5\x39\x57\x5a\xce\x90\x2d\xc6\xf7\x29\x13\x9a\xc7\xd0\x74\x9d\x20\x68\x55\x69\x9d\xb0\xf0\xeb\x9a\x61\xa4\xb6\xdc\x8e\xa3\x14\xb7\x5b\x3f\x94\x22\x52\xe3\x49\x1a\x7e\x05\x7d\x04\xe4\xc9\x9a\x34\x63\x78\x9d\x65\x56\x04\xfe\x0e\x78\x0f\x31\x5a\xee\x7b\x37\xec\x41\x18\xd1\x1a\x29\xfb\xd8\xab\xd1\xd6\xf5\x0f\xea\xb6\x4c\xd5\x74\x67\x2f\x61\xe7\xe6\xf3\xed\x41\x6e\xcc\x12\xc9\xac\x03\x2c\x99\x57\x99\x59\x72\x95\xb2\x98\xff\x93\xf7\xb7\xce\x8e\x02\xe4\xa0\x3e\x2d\x01\x91\x47\x50\xab\x60\x91\x29\xc2\x0c\xcc\x67\x09\xfd\xab\x63\x92\xdc\x25\xee\x85\x6c\xea\xf9\xb5\xa2\xd6\x64\x9e\x2d\x9b\x86\xd3\x73\x1f\x8e\xcb\x7c\x5b\x06\x7e\x9b\x79\x21\xb5\x6a\x9a\xd7\xb5\x36\xcc\xeb\xcb\x15\xaf\xbe\x5e\x48\x99\x37\x84\xfb\x44\xd5\x97\x40\xf9\xe5\xf8\xcd\x15\x60\x13\x6c\x86\x92\xc3\x13\x16\xe4\x9e\xb1\xa8\xc5\x7f\x85\x4f\x8b\x7c\x2c\xad\x57\x59\x75\x40\x09\xa1\x31\xcc\x40\x44\x9b\xb1\x22\x8e\x75\x9a\x0c\x87\xf4\x2d\xb7\xdf\x9b\x50\x6c\x51\x95\xf8\xee\xcf\x36\x58\x57\x97\xbf\xf6\xba\xc1\x1e\x1e\x6d\x5d\xe0\x57\x75\xd7\x3d\xaf\xfb\xe1\xb8\x2e\xa8\xea\x3a\xde\x47\xaf\x53\x05\xb9\x82\xf1\x71\x88\xb7\x4b\xf3\x3d\x49\xfd\x41\x5e\x3a\x16\xd3\x49\x10\x3c\xef\xeb\xe3\xe5\x09\xfb\xff\x7b\xc2\xe4\x70\xc6\xfe\x1b\x67\xec\xbb\xef\x9c\xb1\xef\x3e\x6b\x4d\x35\xb6\xf6\xac\x91\x35\xfe\x0b\x00\x00\xff\xff\xf3\x93\xc1\x45\x2b\x10\x00\x00"),
		},
		"/cb.json": &vfsgen۰CompressedFileInfo{
			name:             "cb.json",
			modTime:          time.Date(2019, 9, 15, 9, 52, 48, 195861652, time.UTC),
			uncompressedSize: 1853,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x54\x4d\x6f\xe2\x48\x10\xbd\xf3\x2b\x4a\xb5\x17\x88\x90\x31\x09\x10\x05\x11\xaf\xf6\xe3\xb2\xa7\x48\xfb\x71\x0a\x59\xd4\xd8\x65\xd3\x5a\xe3\x76\xaa\xdb\x5e\x18\xc4\xfc\xf6\x51\xdb\x80\xdd\x86\x68\x72\x1b\x1f\x12\x78\xae\x57\xd5\xf5\xfa\x3d\x0e\x3d\x00\x2c\x89\xb5\x54\x19\xce\x01\xcb\x31\x0e\x2d\x14\x09\x23\xb4\x2a\x38\x24\x8d\x73\xb0\x55\x16\x6c\x3e\x03\x60\xce\x6a\x4b\x66\x43\x45\x1b\x05\x40\x11\x45\x4c\xda\x82\xb8\x31\x26\x9f\x8f\x46\xe3\xfb\x47\xcf\xf7\x7c\x6f\x3c\x7f\xf2\x9f\xfc\x51\x8b\x78\x62\x1d\x7b\xe7\xbf\xc7\xd3\x74\xbd\x59\x2b\xc1\x51\x33\xbb\x14\x2c\xc5\x3a\x25\xe7\x08\x46\x9a\x94\xfe\x2a\xe2\x58\xee\xdc\x33\x84\x2a\xd3\x46\x64\xc6\xa2\x96\x9b\x16\x64\xcf\x03\x78\x1a\x75\x1a\x54\xd5\xc6\x32\x35\xc4\x9f\xe2\x33\xe5\x8a\x0d\xf1\xf3\x12\x6b\x71\x96\x38\x8c\x48\x1b\x99\x09\x23\x55\xb6\xd2\xc4\xa5\x0c\x69\x95\x89\x2d\x3d\x2f\x31\x66\x95\x99\x5c\x24\xb4\xc4\x5b\x83\x65\x66\x88\x4b\x91\xba\xa3\xdb\x28\xa0\x36\x94\xdb\x95\xa7\x7e\xd3\xa0\xd7\x6a\x83\xff\xcb\x28\x21\x63\x4b\x5e\x4f\xef\x5b\xbd\x2a\x7d\xec\xc1\x7f\x93\x1c\x16\xd2\xc0\xaf\x4c\xe2\x3f\x62\x30\x2c\x73\x0d\x2c\x0c\xe1\xb0\x29\x4f\x58\x46\xb9\x72\xaf\xd3\x8e\xc0\x39\x3c\x3c\x5c\x90\x63\x8b\xa1\x65\x96\xa4\xa4\x8d\x30\x5d\xd2\x7b\x41\xbc\xef\x80\x00\x48\xbb\xdc\x4a\x8d\x7d\x5d\x6c\xfb\xd2\x1e\xa0\x2f\xb5\x91\x6a\xc5\xf4\x5e\x90\x36\x7a\x65\x94\x11\xe9\x61\xb1\xf0\xea\x7b\x09\x82\x21\x93\xce\x55\xa6\x69\x15\xaa\x88\x9e\xbf\x2e\x71\xea\xdd\x2d\xb1\x81\xe3\x54\x24\xda\xe2\x7d\xef\xee\xe7\xc1\x3f\x2f\xd5\xbf\x25\x1e\x5f\x17\x0b\xef\xac\x66\x10\xbc\x0d\x06\x30\x82\xcf\x8f\xbd\x41\x1f\xc0\x1d\x8c\x7d\x1f\x5e\xfe\x84\x92\x42\xa3\xb8\xef\x0f\x5a\xfa\xd5\x19\xb9\x04\xe7\x8f\xdf\xed\xa2\xd1\xc5\xe4\x1d\xed\x00\xb0\xc8\xa4\xd5\x0d\x73\xe2\x90\x32\xe3\xb4\xaa\x4d\xf7\x37\xed\xaa\x8a\xc5\xc2\xab\xbe\x07\x81\x5b\x14\x51\x28\xb7\x22\xb5\x57\x76\xef\xbc\x30\x1b\x26\xbd\x51\x69\x15\xd9\xd7\x83\x75\x74\xaa\x2a\xe5\x7f\x7a\x9c\x89\x71\x34\x43\x38\xbe\x35\x57\xda\xf5\xe6\xe7\x3d\xb4\xde\x43\xbd\xee\x07\x46\xaa\xed\x33\x9b\x39\xb6\x49\x58\xe4\x9b\xae\x63\x4a\xa9\x0b\x91\xca\x2f\x55\x94\xae\x9d\xa3\x89\x25\xe9\x97\x92\x98\x65\x44\x2d\xbf\x9f\x9f\x83\xcd\x67\x42\xf6\x97\x00\xff\xbd\xc7\x61\x7b\xe7\x49\x28\xe2\xc9\x14\x5d\xfd\xaf\x48\x13\x97\x14\x87\xf1\xe3\x94\xbe\x47\x9a\xba\x24\x9a\x8e\xc5\x24\x6c\xe2\x5e\x3f\x6f\x1d\x97\xec\x7f\xd9\xc9\x6e\xce\x1c\x4b\x30\xbd\xe7\x8e\x73\xc0\xe9\xe8\xfa\xc8\x66\x4d\x92\xbe\xd2\xe4\xaa\xfb\x0d\x73\x76\x77\xbb\x24\x94\x55\x91\x45\x3f\x26\xa6\xeb\x3d\xf4\x9d\x6e\xc3\x93\xc7\x56\x22\xcf\x07\x43\xf0\x3d\xdf\x1f\x77\x93\x07\x80\x29\x25\x94\x45\x75\x5e\xc0\x6b\x28\x10\x04\x73\x8b\x38\x3d\x21\x08\x6a\x0b\x7f\xac\xf2\x8d\x80\xf4\xce\xf8\xb1\x77\xec\x7d\x0b\x00\x00\xff\xff\x5b\x0d\x3e\xdb\x3d\x07\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/base.json"].(os.FileInfo),
		fs["/cb.json"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
